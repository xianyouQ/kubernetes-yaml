{
  "kind": "ConfigMap",
  "apiVersion": "v1",
  "metadata": {
    "name": "spinnaker-minio-config-cm",
    "namespace": "spinnaker",
    "selfLink": "/api/v1/namespaces/spinnaker/configmaps/spinnaker-minio-config-cm",
    "uid": "95b3c3cb-2346-11e8-baf7-06dec40001b5",
    "resourceVersion": "143625",
    "creationTimestamp": "2018-03-09T03:04:30Z",
    "labels": {
      "app": "spinnaker-minio",
      "chart": "minio-0.5.5",
      "heritage": "Tiller",
      "release": "spinnaker"
    }
  },
  "data": {
    "config.json": "{\n  \"version\": \"22\",\n  \"credential\": {\n    \"accessKey\": \"spinnakeradmin\",\n    \"secretKey\": \"spinnakeradmin\"\n  },\n  \"region\": \"us-east-1\",\n  \"browser\": \"on\",\n  \"domain\": \"\",\n  \"storageclass\": {\n    \"standard\": \"\",\n    \"rrs\": \"\"\n  },\n  \"notify\": {\n    \"amqp\": {\n      \"1\": {\n        \"enable\": false,\n        \"url\": \"\",\n        \"exchange\": \"\",\n        \"routingKey\": \"\",\n        \"exchangeType\": \"\",\n        \"deliveryMode\": 0,\n        \"mandatory\": false,\n        \"immediate\": false,\n        \"durable\": false,\n        \"internal\": false,\n        \"noWait\": false,\n        \"autoDeleted\": false\n      }\n    },\n    \"nats\": {\n      \"1\": {\n        \"enable\": false,\n        \"address\": \"\",\n        \"subject\": \"\",\n        \"username\": \"\",\n        \"password\": \"\",\n        \"token\": \"\",\n        \"secure\": false,\n        \"pingInterval\": 0,\n        \"streaming\": {\n          \"enable\": false,\n          \"clusterID\": \"\",\n          \"clientID\": \"\",\n          \"async\": false,\n          \"maxPubAcksInflight\": 0\n        }\n      }\n    },\n    \"elasticsearch\": {\n      \"1\": {\n        \"enable\": false,\n        \"format\": \"namespace\",\n        \"url\": \"\",\n        \"index\": \"\"\n      }\n    },\n    \"redis\": {\n      \"1\": {\n        \"enable\": false,\n        \"format\": \"namespace\",\n        \"address\": \"\",\n        \"password\": \"\",\n        \"key\": \"\"\n      }\n    },\n    \"postgresql\": {\n      \"1\": {\n        \"enable\": false,\n        \"format\": \"namespace\",\n        \"connectionString\": \"\",\n        \"table\": \"\",\n        \"host\": \"\",\n        \"port\": \"\",\n        \"user\": \"\",\n        \"password\": \"\",\n        \"database\": \"\"\n      }\n    },\n    \"kafka\": {\n      \"1\": {\n        \"enable\": false,\n        \"brokers\": null,\n        \"topic\": \"\"\n      }\n    },\n    \"webhook\": {\n      \"1\": {\n        \"enable\": false,\n        \"endpoint\": \"\"\n      }\n    },\n    \"mysql\": {\n      \"1\": {\n        \"enable\": false,\n        \"format\": \"namespace\",\n        \"dsnString\": \"\",\n        \"table\": \"\",\n        \"host\": \"\",\n        \"port\": \"\",\n        \"user\": \"\",\n        \"password\": \"\",\n        \"database\": \"\"\n      }\n    },\n    \"mqtt\": {\n      \"1\": {\n        \"enable\": false,\n        \"broker\": \"\",\n        \"topic\": \"\",\n        \"qos\": 0,\n        \"clientId\": \"\",\n        \"username\": \"\",\n        \"password\": \"\"\n      }\n    }\n  }\n}",
    "initialize": "#!/bin/sh\nset -e ; # Have script exit in the event of a failed command.\n\n# connectToMinio\n# Use a check-sleep-check loop to wait for Minio service to be available\nconnectToMinio() {\n  ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts\n  set -e ; # fail if we can't read the keys.\n  ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;\n  set +e ; # The connections to minio are allowed to fail.\n  echo \"Connecting to Minio server: http://$MINIO_ENDPOINT:$MINIO_PORT\" ;\n  MC_COMMAND=\"mc config host add myminio http://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET\" ;\n  $MC_COMMAND ;\n  STATUS=$? ;\n  until [ $STATUS = 0 ]\n  do\n    ATTEMPTS=`expr $ATTEMPTS + 1` ;\n    echo \\\"Failed attempts: $ATTEMPTS\\\" ;\n    if [ $ATTEMPTS -gt $LIMIT ]; then\n      exit 1 ;\n    fi ;\n    sleep 2 ; # 1 second intervals between attempts\n    $MC_COMMAND ;\n    STATUS=$? ;\n  done ;\n  set -e ; # reset `e` as active\n  return 0\n}\n\n# checkBucketExists ($bucket)\n# Check if the bucket exists, by using the exit code of `mc ls`\ncheckBucketExists() {\n  BUCKET=$1\n  CMD=$(/usr/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)\n  return $?\n}\n\n# createBucket ($bucket, $policy, $purge)\n# Ensure bucket exists, purging if asked to\ncreateBucket() {\n  BUCKET=$1\n  POLICY=$2\n  PURGE=$3\n\n  # Purge the bucket, if set & exists\n  # Since PURGE is user input, check explicitly for `true`\n  if [ $PURGE = true ]; then\n    if checkBucketExists $BUCKET ; then\n      echo \"Purging bucket '$BUCKET'.\"\n      set +e ; # don't exit if this fails\n      /usr/bin/mc rm -r --force myminio/$BUCKET\n      set -e ; # reset `e` as active\n    else\n      echo \"Bucket '$BUCKET' does not exist, skipping purge.\"\n    fi\n  fi\n\n  # Create the bucket if it does not exist\n  if ! checkBucketExists $BUCKET ; then\n    echo \"Creating bucket '$BUCKET'\"\n    /usr/bin/mc mb myminio/$BUCKET\n  else\n    echo \"Bucket '$BUCKET' already exists.\"\n  fi\n\n  # At this point, the bucket should exist, skip checking for existence\n  # Set policy on the bucket\n  echo \"Setting policy of bucket '$BUCKET' to '$POLICY'.\"\n  /usr/bin/mc policy $POLICY myminio/$BUCKET\n}\n\n# Try connecting to Minio instance\nconnectToMinio\n# Create the bucket\ncreateBucket bucket none false"
  }
}
